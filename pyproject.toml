[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "aiofiles"
description = "File support for asyncio."
authors = [
    {name = "Tin Tvrtkovic", email = "tinchester@gmail.com"},
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Framework :: AsyncIO",
]
dynamic = ["version"]
dependencies = []

[project.urls]
Changelog = "https://github.com/Tinche/aiofiles#history"
"Bug Tracker" = "https://github.com/Tinche/aiofiles/issues"
Repository = "https://github.com/Tinche/aiofiles"

[dependency-groups]
lint = [
    "mypy>=1.16.0",
    "ruff>=0.11.12",
]
test = [
    "coverage>=7.8.2",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "tox>=4.26.0",
    "tox-uv>=1.26.0",
]

[tool.uv.build-backend]
source-include = ["LICENSE"]

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.coverage.run]
parallel = true
source_pkgs = ["aiofiles"]

[tool.coverage.paths]
source = [
   "src",
   ".tox/*/lib/python*/site-packages",
   ".tox/pypy*/site-packages",
]

[tool.pytest.ini_options]
minversion = "8.3"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
indent-width = 4
line-length = 88
target-version = "py39"

[tool.ruff.format]
docstring-code-format = false
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    # "A",  # flake8-builtins (A)
    # "ANN",  # flake8-annotations (ANN)
    # "ARG",  # flake8-unused-arguments (ARG)
    "ASYNC",  # flake8-async (ASYNC)
    "B",  # flake8-bugbear (B)
    "BLE",  # flake8-blind-except (BLE)
    "C4",  # flake8-comprehensions (C4)
    # "COM",  # flake8-commas (COM)
    # "D",  # pydocstyle (D)
    "E",  # Error (E)
    "EM",  # flake8-errmsg (EM)
    "ERA",  # eradicate (ERA)
    "F",  # Pyflakes (F)
    # "FBT",  # flake8-boolean-trap (FBT)
    "I",  # isort (I)
    "ICN",  # flake8-import-conventions (ICN)
    "ISC",  # flake8-implicit-str-concat (ISC)
    # "N",  # pep8-naming (N)
    "PIE",  # flake8-pie (PIE)
    "PLE",  # Error (PLE)
    # "PLR",  # Refactor (PLR)
    "PLW",  # Warning (PLW)
    # "PT",  # flake8-pytest-style (PT)
    "PTH",  # flake8-use-pathlib (PTH)
    "PYI",  # flake8-pyi (PYI)
    "Q",  # flake8-quotes (Q)
    "RET",  # flake8-return (RET)
    "RSE",  # flake8-raise (RSE)
    "S",  # flake8-bandit (S)
    "SIM",  # flake8-simplify (SIM)
    "T10",  # flake8-debugger (T10)
    "T20",  # flake8-print (T20)
    "TC",  # flake8-type-checking (TC)
    "TID",  # flake8-tidy-imports (TID)
    "TRY",  # tryceratops (TRY)
    "UP",  # pyupgrade (UP)
    "W",  # Warning (W)
    "YTT"  # flake8-2020 (YTT)
]
ignore = [
    "COM812",
    "ISC001",
]
fixable = [
    "COM",
    "I"
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"src/**/*.py" = [
    "TID252",  # https://docs.astral.sh/ruff/rules/relative-imports/
]
"tests/**/*.py" = [
    "ARG",
    "ASYNC",
    "BLE",
    "PTH",
    "S",
    "SIM",
    "T20"
]
